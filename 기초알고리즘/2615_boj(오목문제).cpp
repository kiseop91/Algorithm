#include <iostream>
using namespace std;
int map[21][21];
int cnt;  // 오목인지 확인하는 변수
int dx[] = { 0,-1,1,1 };  //→  ↗ ↓  ↘  
int dy[] = { 1,1,0,1 };
void print();
void input();
bool solve();
bool safe(int x, int y);
int main()
{

	input();
	if (solve() == false)
	{
		cout << 0 << endl;
	}

	return 0;
}

bool solve()
{
	for (int i = 1; i <= 19; i++)
	{
		for (int j = 1; j <= 19; j++)
		{
			if (map[i][j])  //0이 아닌 수가 오면 조건문실행. (백 or 흑)
			{
				//먼저 검사할 방향을 선택한다.
				for (int d = 0; d < 4; d++)
				{
					int nx = dx[d];
					int ny = dy[d];

					if (map[i][j] == map[i - nx][j - ny]) //선택된 방향의 왼쪽부분에 돌이있으면 
					{                                    //검사할필요가없다. 음의부호(-)를 붙여주면됨.
						continue;//pass
					}
					else //같은돌이없으면 이제 오목인지 검사한다.
					{
						int cx = i;
						int cy = j;// 오목검사를를위해 현재가리키는 좌표값저장변수선언
						for (int k = 0; k < 4; k++) // 5번째 까지 같은돌인가?
						{
							if (map[cx][cy] == map[cx + nx][cy + ny])
							{
								cx = cx + nx;
								cy = cy + ny; //다음좌표를 현재좌표정보로저장
								if (k == 3)
								{
									cx = cx + nx;
									cy = cy + ny; //다음좌표.
									if (map[i][j] == map[cx][cy]) //6목이란뜻.
									{
										continue;
									}
									else  //오목발견.
									{
										cout << map[i][j] << endl;
										cout << i << " " << j << endl;
										return true;  //오목을 찾으면 True반환.
									}
								}
							}
						}
					}
				}

			}
		}
	}
	return false;  //오목을 못찾으면 false반환.
}
bool safe(int x, int y)
{
	return  ((1 <= x && x <= 19) && (1 <= y && y <= 19));
}
void input()
{
	for (int i = 1; i <= 19; i++)
	{
		for (int j = 1; j <= 19; j++)
		{
			cin >> map[i][j];
		}
	}
}
void print()
{
	cout << endl;
	for (int i = 1; i <= 19; i++)
	{
		for (int j = 1; j <= 19; j++)
		{
			cout << map[i][j] << " ";
		}
		cout << endl;
	}
}



/*
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 1 2 0 0 2 2 2 1 0 0 0 0 0 0 0 0 0 0
0 0 1 2 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0
0 0 0 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 1 2 2 0 0 0 0 0 0 0 0 0 0 0 0
0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 2 1 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 1 2 0 0 2 2 2 1 0 0 0 0 0 0 0 0 0 0
0 0 0 2 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0
0 0 0 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 1 2 2 0 0 0 0 0 0 0 0 0 0 0 0
0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 2 1 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

*/